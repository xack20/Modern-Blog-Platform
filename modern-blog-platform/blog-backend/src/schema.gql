# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResponse {
  access_token: String!
  user: UserInfo!
}

type BlogStats {
  totalCategories: Int!
  totalComments: Int!
  totalMedia: Int!
  totalPosts: Int!
  totalTags: Int!
  totalUsers: Int!
  totalViews: Int!
}

type Category {
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  posts: [Post]!
  slug: String!
  updatedAt: DateTime!
}

type Comment {
  author: User!
  authorId: String!
  content: String!
  createdAt: DateTime!
  id: ID!
  parent: Comment
  parentId: String
  post: Post!
  postId: String!
  replies: [Comment!]!
  status: CommentStatus!
  updatedAt: DateTime!
}

"""Status of a comment"""
enum CommentStatus {
  APPROVED
  PENDING
  REJECTED
}

input CommentsFilterInput {
  onlyRootComments: Boolean
  postId: String
  searchTerm: String
  skip: Float
  status: CommentStatus
  take: Float
  userId: String
}

input CreateCategoryInput {
  description: String
  name: String!
}

input CreateCommentInput {
  content: String!
  parentId: String
  postId: String!
}

input CreateMediaInput {
  filename: String!
  key: String!
  size: Float!
  type: String!
  url: String!
}

input CreatePostInput {
  categoryId: String
  content: String!
  excerpt: String
  featured: Boolean
  featuredImage: String
  seoDescription: String
  seoTitle: String
  status: PostStatus! = DRAFT
  tagIds: [String]!
  title: String!
}

input CreateTagInput {
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type Media {
  createdAt: DateTime!
  filename: String!
  id: ID!
  key: String!
  size: Float!
  type: String!
  url: String!
  user: User!
  userId: String!
}

type Mutation {
  approveComment(id: ID!): Comment!
  createCategory(input: CreateCategoryInput!): Category!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  createMedia(createMediaInput: CreateMediaInput!): Media!
  createPost(input: CreatePostInput!): Post!
  createTag(input: CreateTagInput!): Tag!
  deleteCategory(id: ID!): Boolean!
  deletePost(id: ID!): Boolean!
  deleteTag(id: ID!): Boolean!
  generatePresignedUrl(key: String!): String!
  login(input: LoginInput!): AuthResponse!
  refreshToken: AuthResponse!
  register(input: RegisterInput!): AuthResponse!
  rejectComment(id: ID!): Comment!
  removeComment(id: ID!): Comment!
  removeMedia(id: ID!): Media!
  removeUser(id: ID!): User!
  updateAnyUser(id: ID!, updateUserInput: UpdateUserInput!): User!
  updateCategory(input: UpdateCategoryInput!): Category!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  updatePost(input: UpdatePostInput!): Post!
  updateProfile(updateProfileInput: UpdateProfileInput!): User!
  updateTag(input: UpdateTagInput!): Tag!
  updateUser(updateUserInput: UpdateUserInput!): User!
  uploadFile(uploadFileInput: UploadFileInput!): Media!
}

type Post {
  author: User!
  authorId: String!
  category: Category
  categoryId: String
  content: String!
  createdAt: DateTime!
  excerpt: String
  featured: Boolean
  featuredImage: String
  id: ID!
  publishedAt: DateTime
  seoDescription: String
  seoTitle: String
  slug: String!
  status: PostStatus!
  tags: [Tag]!
  title: String!
  updatedAt: DateTime!
  views: Float!
}

"""Status of a blog post"""
enum PostStatus {
  ARCHIVED
  DRAFT
  PUBLISHED
}

input PostsFilterInput {
  authorId: String
  categoryId: String
  featured: Boolean
  limit: Int
  offset: Int
  search: String
  status: PostStatus
  tagId: String
}

type Profile {
  avatar: String
  bio: String
  github: String
  id: ID!
  linkedin: String
  twitter: String
  userId: String!
  website: String
}

type Query {
  allMedia: [Media!]!
  blogStatistics: BlogStats!
  categories: [Category!]!
  category(id: ID!): Category!
  categoryBySlug(slug: String!): Category!
  comment(id: ID!): Comment!
  comments(filters: CommentsFilterInput): [Comment!]!
  featuredPosts(limit: Int): [Post!]!
  me: User!
  media(id: ID!): Media!
  myMedia: [Media!]!
  post(id: ID!): Post!
  postBySlug(slug: String!): Post!
  posts(filters: PostsFilterInput): [Post!]!
  publicComments(postId: ID!): [Comment!]!
  recentActivities: [RecentActivity!]!
  tag(id: ID!): Tag!
  tagBySlug(slug: String!): Tag!
  tags: [Tag!]!
  user(id: ID!): User!
  userByUsername(username: String!): User!
  userComments: [Comment!]!
  users: [User!]!
}

type RecentActivity {
  createdAt: DateTime!
  description: String!
  id: String!
  title: String!
  type: String!
  userId: String
  username: String
}

input RegisterInput {
  email: String!
  password: String!
  username: String!
}

"""User role"""
enum Role {
  ADMIN
  EDITOR
  USER
}

type Tag {
  createdAt: DateTime!
  id: ID!
  name: String!
  posts: [Post]!
  slug: String!
  updatedAt: DateTime!
}

input UpdateCategoryInput {
  description: String
  id: ID!
  name: String
  slug: String
}

input UpdateCommentInput {
  content: String
  id: ID!
  status: CommentStatus
}

input UpdatePostInput {
  categoryId: String
  content: String!
  excerpt: String
  featured: Boolean
  featuredImage: String
  id: ID!
  seoDescription: String
  seoTitle: String
  slug: String
  status: PostStatus
  tagIds: [String]!
  title: String!
}

input UpdateProfileInput {
  avatar: String
  bio: String
  github: String
  linkedin: String
  twitter: String
  website: String
}

input UpdateTagInput {
  id: ID!
  name: String
  slug: String
}

input UpdateUserInput {
  email: String
  password: String
  role: Role
  username: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadFileInput {
  file: Upload!
}

type User {
  comments: [Comment!]!
  createdAt: DateTime!
  email: String!
  id: ID!
  media: [Media!]!
  posts: [Post!]!
  profile: Profile
  role: Role!
  updatedAt: DateTime!
  username: String!
}

type UserInfo {
  email: String!
  id: String!
  role: String!
  username: String!
}